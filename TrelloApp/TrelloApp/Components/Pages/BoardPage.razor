@page "/BoardPage"
@using TrelloApp.Contracts.Models
@using TrelloApp.Contracts.Response
@using TrelloApp.ApiTrello.Service
@inject BoardService BoardService
@inject ListService ListService;
@inject OrganizationService OrganizationService
@inject CardService CardService;

@using Microsoft.AspNetCore.Components
@using System.ComponentModel.DataAnnotations
@using TrelloApp.Contracts.Request

@using Microsoft.AspNetCore.Components
@using System.ComponentModel.DataAnnotations



<MudDropContainer T="KanbanTaskItem" @ref="_dropContainer" Items="@_tasks" ItemsSelector="@((item,column) => item.ListId == column)" ItemDropped="TaskUpdated" Class="d-flex flex-row">
	<ChildContent>
		@foreach (var item in _sections)
		{
			<MudPaper Elevation="0" Width="224px" MinHeight="400px" Class="pa-4 ma-4 d-flex flex-column mud-background-gray rounded-lg">
				<MudToolBar DisableGutters="true">
					<MudText Typo="Typo.subtitle1"><b>@item.Name</b></MudText>
					<MudSpacer />
					<MudMenu Icon="@Icons.Material.Rounded.MoreHoriz" AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.TopRight" ListClass="pa-2 d-flex flex-column" PopoverClass="mud-elevation-25">
						<MudButton Size="Size.Small" Color="Color.Error" StartIcon="@Icons.Material.Outlined.Delete" OnClick="@( () => DeleteSection(item))">Delete Section</MudButton>
						<MudButton Size="Size.Small" Color="Color.Default" StartIcon="@Icons.Material.Rounded.Edit">Rename Section</MudButton>
					</MudMenu>
				</MudToolBar>
				<MudDropZone T="KanbanTaskItem" Identifier="@item.Id" Class="mud-height-full" />
				@if (item.NewTaskOpen)
				{
					<MudPaper Elevation="25" Class="pa-2 rounded-lg">
						<MudTextField @bind-Value="item.NewTaskName" Placeholder="New Task" DisableUnderLine="true" Margin="Margin.Dense" Class="mx-2 mt-n2"></MudTextField>
						<MudButton OnClick="@(() => AddTask(item))" Size="Size.Small" Color="Color.Primary" FullWidth="true">Add Task</MudButton>
					</MudPaper>
				}
				else
				{
					<MudButton OnClick="@(() => item.NewTaskOpen = !item.NewTaskOpen)" StartIcon="@Icons.Material.Filled.Add" FullWidth="true" Class="rounded-lg py-2">Add Task</MudButton>
				}
			</MudPaper>
		}
		<MudPaper Class="pa-4" Elevation="0" Width="224px">
			@if (_addSectionOpen)
			{
				<MudPaper Elevation="0" Width="224px" Class="pa-4 d-flex flex-column mud-background-gray rounded-lg">
					<EditForm Model="@newSectionModel" OnValidSubmit="OnValidSectionSubmit">
						<DataAnnotationsValidator />
						<MudTextField @bind-Value="newSectionModel.Name" For="@(() => newSectionModel.Name)" Placeholder="New Section" DisableUnderLine="true"></MudTextField>
						<MudButton ButtonType="ButtonType.Submit" Size="Size.Small" Color="Color.Primary" FullWidth="true">Add Section</MudButton>
					</EditForm>
				</MudPaper>
			}
			else
			{
				<MudButton OnClick="OpenAddNewSection" Variant="Variant.Outlined" StartIcon="@Icons.Material.Filled.Add" Color="Color.Primary" Class="rounded-lg py-2" FullWidth="true">Add Section</MudButton>
			}
		</MudPaper>
	</ChildContent>
	<ItemRenderer>
		<MudPaper Elevation="25" Class="pa-4 rounded-lg my-3">@context.Name</MudPaper>
	</ItemRenderer>
</MudDropContainer>

@code {

	private List<Card> _cards;
	private List<List> _lists;
	private List<KanBanSections> _sections = new();
	private List<KanbanTaskItem> _tasks = new();
	private string BoardId = "65f03219ed0abce6afd5dd2a";
	private bool _addSectionOpen;
	private MudDropContainer<KanbanTaskItem> _dropContainer;
	
	protected override async Task OnInitializedAsync()
	{
		_lists = await BoardService.GetBoardLists(BoardId);

		foreach (var list in _lists)
		{
			var section = new KanBanSections(list.Name, list.Id, false, String.Empty);
			_sections.Add(section);

			var listTasks = await ListService.GetListCards(list.Id);
			
			foreach (var task in listTasks)
			{
				_tasks.Add(new KanbanTaskItem(task.Name, task.Id, list.Id));
			}
		}
	}	

	private async void TaskUpdated(MudItemDropInfo<KanbanTaskItem> info)
	{
		var oldListId = info.Item.ListId;
		info.Item.ListId = info.DropzoneIdentifier;
		try
		{
			await CardService.UpdateCard(new UpdateCardRequest()
			{
				IdList = info.DropzoneIdentifier
			}, info.Item.Id, oldListId);
		}
		catch (Exception ex)
		{
			Console.WriteLine($"Error : {ex.Message}");
		}
		
	}

	public class KanBanSections
	{
		public string Name { get; init; }
		public string Id { get; init; }
		public bool NewTaskOpen { get; set; }
		public string NewTaskName { get; set; }

		public KanBanSections(string name, string id, bool newTaskOpen, string newTaskName)
		{
			Name = name;
			Id = id;
			NewTaskOpen = newTaskOpen;
			NewTaskName = newTaskName;
		}
	}
	public class KanbanTaskItem
	{
		public string Name { get; init; }
		public string ListId { get; set; }
		public string Id { get; init; }

		public KanbanTaskItem(string name, string id, string listId)
		{
			Name = name;
			Id = id;
			ListId = listId;
		}
	}

	/*private List<KanbanTaskItem> _tasks = new()
		{
			new KanbanTaskItem("Write unit test", "To Do"),
			new KanbanTaskItem("Some docu stuff", "To Do"),
			new KanbanTaskItem("Walking the dog", "To Do"),
		};*/

	KanBanNewForm newSectionModel = new KanBanNewForm();

	public class KanBanNewForm
	{
		[Required]
		[StringLength(10, ErrorMessage = "Name length can't be more than 10.")]
		public string Name { get; set; }
	}

	private void OnValidSectionSubmit(EditContext context)
	{
		try
		{
			var newList = BoardService.AddListToBoard(new AddListToBoardRequest()
			{
				Name = newSectionModel.Name
			}, BoardId);
			
			_sections.Add(new KanBanSections(newSectionModel.Name, newList.Id.ToString(),false, String.Empty));
			newSectionModel.Name = string.Empty;
			_addSectionOpen = false;
		}
		catch (Exception ex)
		{
			Console.WriteLine($"Error : {ex.Message}");
		}

	}

	private void OpenAddNewSection()
	{
		_addSectionOpen = true;
	}

	private async void AddTask(KanBanSections section)
	{
		try
		{
			var newCard = await CardService.CreateCard(new CreateCardRequest()
			{
				Name = section.NewTaskName,
				IdList = section.Id
			});
			_tasks.Add(new KanbanTaskItem(section.NewTaskName, newCard.Id, section.Name));
			section.NewTaskName = string.Empty;
			section.NewTaskOpen = false;
		}
		catch (Exception ex)
		{
			Console.WriteLine($"Error: {ex.Message}");
		}
		_dropContainer.Refresh();
	}

	private async void DeleteSection(KanBanSections section)
	{
		if (_sections.Count == 1)
		{
			try
			{
				_tasks.Clear();
				_sections.Clear();
			}
			catch (Exception ex)
			{
				Console.WriteLine($"Error: {ex.Message}");
			}
		}
		else
		{
			int newIndex = _sections.IndexOf(section) - 1;
			if (newIndex < 0)
			{
				newIndex = 0;
			}

			_sections.Remove(section);
			

			var tasks = _tasks.Where(x => x.ListId == section.Id);
			foreach (var item in tasks)
			{
				item.ListId = _sections[newIndex].Id;
			}
		}

		try
		{
			await ListService.ToggleArchiveList(new ToggleArchiveListRequest()
			{
				Value = true
			}, section.Id);
		}
		catch (Exception ex)
		{
			Console.WriteLine($"Error : {ex.Message}");
		}
	}
}